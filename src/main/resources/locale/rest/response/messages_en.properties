# Application errors
application.error.internal=Internal server error

# Security config
security.access_denied=Error 403. Access denied.

# User service
user.service.create.user=Creating a new user: {0}
user.service.created.user=Created a new user: {0}
user.service.update.user=Updating a user: {0}
user.service.updated.user=Updated a user: {0}
user.service.delete.user=Deleting a user: {0}
user.service.deleted.user=Deleted a user: {0}
user.service.get.user.by.id=Finding a user by id: {0}
user.service.get.user.by.username=Finding a user by username: {0}
user.service.get.user.by.first.name=Finding a user by first name: {0}
user.service.get.user.by.count.books=Finding user by count books
user.service.get.user.all=Finding all users
user.service.user.already.exist=User with id `{0}` already exists
user.service.user.not.entity=User with id `{0}` is not entity
user.service.user.id.not.found=User with id `{0}` not found
user.service.user.username.not.found=User with username `{0}` not found
user.service.user.first.name.not.found=User with first name `{0}` not found
user.service.error.get.user.by.username=Error while finding a user by username: {0}
user.service.error.get.user.by.first.name=Error while finding a user by first name: {0}
user.service.error.get.user.by.count.books=Error while finding a user by count books: {0}
user.service.error.get.user.all=Error while finding all users
user.service.error.create.user=Error while creating a new user
user.service.found.user=Found a user: {0}
user.service.found.users=Found {0} users

# User role service
user.role.service.create.user.role=Creating a new user role: {0}
user.role.service.created.user.role=Created a new user role: {0}
user.role.service.update.user.role=Updating a user role: {0}
user.role.service.updated.user.role=Updated a user role: {0}
user.role.service.delete.user.role=Deleting a user role: {0}
user.role.service.deleted.user.role=Deleted a user role: {0}
user.role.service.get.user.role.by.id=Finding a user role by id: {0}
user.role.service.get.user.role.by.security.role=Finding a user role by security role: {0}
user.role.service.user.role.id.not.found=User role with id `{0}` not found
user.role.service.user.role.security.role.not.found=User role with security role `{0}` not found
user.role.service.user.role.already.exist=User role with name `{0}` already exists
user.role.service.user.role.is.unique=Error while creating a new user role: user role `{0}` is unique
user.role.service.user.role.not.entity=User role with id `{0}` is not entity
user.role.service.error.create.user.role=Error while creating a new user role
user.role.service.found.user.role=Found a user role: {0}

# Comment service
comment.service.create.comment=Creating a new comment: {0}
comment.service.created.comment=Created a new comment: {0}
comment.service.update.comment=Updating a comment: {0}
comment.service.updated.comment=Updated a comment: {0}
comment.service.delete.comment=Deleting a comment: {0}
comment.service.deleted.comment=Deleted a comment: {0}
comment.service.get.comment.by.id=Finding a comment by id: {0}
comment.service.get.comment.by.user=Finding all comments of user: {0}
comment.service.get.comment.all=Finding all comments
comment.service.comment.already.exist=Comment with id `{0}` already exists
comment.service.comment.not.entity=Comment with id `{0}` is not entity
comment.service.comment.id.not.found=Comment with id `{0}` not found
comment.service.error.get.comment.by.user=Error while finding comments by user: {0}
comment.service.error.create.comment=Error while creating a new comment
comment.service.error.get.comment.all=Error while finding all comments
comment.service.found.comment=Found a comment: {0}
comment.service.found.comments=Found {0} comments

# Book service
book.service.create.book=Creating a new book: {0}
book.service.created.book=Created a new book: {0}
book.service.update.book=Updating a book: {0}
book.service.updated.book=Updated a book: {0}
book.service.delete.book=Deleting a book: {0}
book.service.deleted.book=Deleted a book: {0}
book.service.get.book.by.id=Finding a book by id: {0}
book.service.get.book.by.name=Finding a book by name: {0}
book.service.get.book.by.count.pages=Finding books by count pages
book.service.get.book.by.genre=Finding books by genre: {0}
book.service.get.book.all=Finding all books
book.service.book.already.exist=Book with id `{0}` already exists
book.service.book.not.entity=Book with id `{0}` is not entity
book.service.book.id.not.found=Book with id `{0}` not found
book.service.book.name.not.found=Book with name `{0}` not found
book.service.error.create.book=Error while creating a new book
book.service.error.get.book.by.id=Error while finding books by id
book.service.error.get.book.by.name=Error while finding books by name
book.service.error.get.book.by.count.pages=Error while finding books by count pages
book.service.error.get.book.by.genre=Error while finding books by genre
book.service.error.get.book.all=Error while finding all books
book.service.found.book=Found a book: {0}
book.service.found.books=Found {0} books

# Genre service
genre.service.create.genre=Creating a new genre: {0}
genre.service.created.genre=Created a new genre: {0}
genre.service.update.genre=Updating a genre: {0}
genre.service.updated.genre=Updated a genre: {0}
genre.service.delete.genre=Deleting a genre: {0}
genre.service.deleted.genre=Deleted a genre: {0}
genre.service.get.genre.by.id=Finding a genre by id: {0}
genre.service.get.genre.by.name=Finding a genre by name: {0}
genre.service.get.genre.all=Finding all genres
genre.service.genre.already.exist=Genre with id `{0}` already exists
genre.service.genre.not.entity=Genre with id `{0}` is not entity
genre.service.genre.id.not.found=Genre with id `{0}` not found
genre.service.genre.name.not.found=Genre with name `{0}` not found
genre.service.error.create.genre=Error while creating a new genre
genre.service.error.get.genre.by.name=Error while finding genre by name
genre.service.found.genre=Found a genre: {0}
genre.service.found.genres=Found {0} genres

# User controller
user.controller.get.user.all=Request get all users
user.controller.get.user.by.username=Request get user by username: {0}
user.controller.error.get.user.by.username=Error request get user by username: {0}
user.controller.error.get.user.all=Error request get all users
user.controller.response.user=Response has user: {0}
user.controller.response.users=Response has {0} users

# Comment controller
comment.controller.get.comment.all=Request get all comments
comment.controller.get.comment.by.id=Request get comment by id: {0}
comment.controller.error.get.comment.by.id=Error request get comment by id: {0}
comment.controller.error.get.comment.all=Error request get all comments
comment.controller.response.comment=Response has comment: {0}
comment.controller.response.comments=Response has {0} comments

# Book controller
book.controller.get.book.all=Request get all books
book.controller.get.genres.book=Request get all genres of books
book.controller.get.book.by.id=Request get book by id: {0}
book.controller.get.book.by.genre=Request get books by genre: {0}
book.controller.error.get.book.by.id=Error request get book by id: {0}
book.controller.error.get.book.by.genre=Error request get books by genre: {0}
book.controller.error.get.book.all=Error request get all books
book.controller.error.get.genres.book=Error request get all genres of books
book.controller.response.book=Response has book: {0}
book.controller.response.books=Response has {0} books
book.controller.response.genres=Response has {0} genres

# Genre controller
genre.controller.get.genre.all=Request get all genres
genre.controller.get.genre.by.id=Request get genre by id: {0}
genre.controller.get.genre.by.name=Request get genre by name: {0}
genre.controller.error.get.genre.by.id=Error request get book by id: {0}
genre.controller.error.get.genre.by.name=Error request get books by genre: {0}
genre.controller.error.get.genre.all=Error request get all books
genre.controller.response.genre=Response has genre: {0}
genre.controller.response.genres=Response has {0} genres

# Catalog controller
catalog.controller.login.complete=Request user login complete: {0}
catalog.controller.login.response.user=Response has user: {0}
catalog.controller.error.login=Error while user login
catalog.controller.error.access.denied=Error while access denied

# Genres
genre.undefined=Undefined
genre.drama=Drama
genre.comedy=Comedy
genre.tragedy=Tragedy