# Application errors
application.error.internal=Internal server error

# Security config
security.access_denied=Error 403. Access denied.

# User service
user.service.create.user=Creating a new user: {0}
user.service.created.user=Created a new user: {0}
user.service.update.user=Updating a user: {0}
user.service.updated.user=Updated a user: {0}
user.service.delete.user=Deleting a user: {0}
user.service.deleted.user=Deleted a user: {0}
user.service.get.user.by.id=Finding a user by id: {0}
user.service.get.user.by.username=Finding a user by username: {0}
user.service.get.user.by.first.name=Finding a user by first name: {0}
user.service.get.user.by.count.books=Finding user by count books
user.service.get.user.all=Finding all users
user.service.user.already.exist=User with id `{0}` already exists
user.service.user.not.entity=User with id `{0}` is not entity
user.service.user.id.not.found=User with id `{0}` not found
user.service.user.username.not.found=User with username `{0}` not found
user.service.user.first.name.not.found=User with first name `{0}` not found
user.service.error.get.user.by.username=Error while finding a user by username: {0}
user.service.error.get.user.by.first.name=Error while finding a user by first name: {0}
user.service.error.get.user.by.count.books=Error while finding a user by count books: {0}
user.service.error.get.user.all=Error while finding all users
user.service.error.create.user=Error while creating a new user
user.service.found.user=Found a user: {0}
user.service.found.users=Found {0} users

# User role service
user.role.service.create.user.role=Creating a new user role: {0}
user.role.service.created.user.role=Created a new user role: {0}
user.role.service.update.user.role=Updating a user role: {0}
user.role.service.updated.user.role=Updated a user role: {0}
user.role.service.delete.user.role=Deleting a user role: {0}
user.role.service.deleted.user.role=Deleted a user role: {0}
user.role.service.get.user.role.by.id=Finding a user role by id: {0}
user.role.service.get.user.role.by.security.role=Finding a user role by security role: {0}
user.role.service.user.role.id.not.found=User role with id `{0}` not found
user.role.service.user.role.security.role.not.found=User role with security role `{0}` not found
user.role.service.user.role.already.exist=User role with name `{0}` already exists
user.role.service.user.role.is.unique=Error while creating a new user role: user role `{0}` is unique
user.role.service.user.role.not.entity=User role with id `{0}` is not entity
user.role.service.error.create.user.role=Error while creating a new user role
user.role.service.found.user.role=Found a user role: {0}

# User controller
user.controller.get.user.all=Request get all users
user.controller.get.user.by.username=Request get user by username: {0}
user.controller.error.get.user.by.username=Error request get user by username: {0}
user.controller.error.get.user.all=Error request get all users
user.controller.response.user=Response has user: {0}
user.controller.response.users=Response has {0} users

# Catalog controller
catalog.controller.login.complete=Request user login complete: {0}
catalog.controller.login.response.user=Response has user: {0}
catalog.controller.error.login=Error while user login
catalog.controller.error.access.denied=Error while access denied